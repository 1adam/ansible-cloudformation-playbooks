---
- hosts: localhost
  become: yes
  tasks:
    - name: grab repo to local
      git:
        repo: 'https://github.com/1adam/aws.git'
        dest: '/opt/aws-repo'
        version: 'master'

- hosts: localhost
  become: yes
  become_user: root
  vars:
    ec2_keypair_name: ""
    ec2_base_ami: ""
    aws_region: "us-east-1"
    mgmt_ip: ""
    ec2_nat_image: ""
    app_name: ""
  tasks:
    - name: preflight var check
      fail:
        msg: "Missing an important parameter."
      when: "ec2_keypair_name == '' or mgmt_ip == ''"

    - block:
      - name: "Is there an existing Ubuntu16_LAMP-CodeDeploy_* AMI?"
        ec2_ami_facts:
          filters:
            name: "Ubuntu16_LAMP-CodeDeploy_*"
        register: find_existing_ec2_ami

      - name: Existing EC2 AMI - set fact to its ID
        set_fact:
          ec2_base_ami: "{{ find_existing_ec2_ami.images | sort(attribute='creation_date',reverse=True) | map(attribute='image_id') | list | first }}"

      - name: "Create a LAMP+CodeDeploy AMI from the latest Ubuntu-64 LTS"
        cloudformation:
          stack_name: "mkNewAMI"
          state: "present"
          region: "{{aws_region}}"
          template: '/opt/aws-repo/cloudformation-templates/ec2-codedeploy/Create-Ubuntu16-LAMP-AMI.yml'
          template_parameters:
            KeyPair: "{{ec2_keypair_name}}"
        register: cf_ret
        async: 600
        poll: 30

      - name: wait for the new AMI to become 'available'
        ec2_ami_facts:
          image_ids:
            - "{{ cf_ret.stack_outputs.FinalAMI }}"
        register: descNewAMI
        until: "descNewAMI.images[0].state.find('available') != -1"
        retries: 20
        delay: 30

      - name: remove the old/tmp stack used to create AMI
        cloudformation:
          stack_name: "mkNewAMI"
          state: "absent"
        async: 300
        poll: 0

      - name: set base AMI fact
        set_fact:
          ec2_base_ami: "{{ cf_ret.stack_outputs.FinalAMI }}"
      when: "ec2_base_ami == ''"

    - block:
      - name: figure out the NAT image, if not specified
        ec2_ami_facts:
          filters:
            architecture: "x86_64"
            name: "amzn-ami-vpc-nat-hvm*"
            description: "*NAT*"
        register: discover_nat_img

      - name: Found NAT AMI - set fact to its ID
        set_fact:
          ec2_nat_image: "{{ discover_nat_img.images | sort(attribute='creation_date',reverse=True) | map(attribute='image_id') | list | first }}"
      when: "ec2_nat_image == ''"

    - name: Create the VPC and subnets
      cloudformation:
        stack_name: "{{app_name}}-vpc"
        region: "{{aws_region}}"
        template: "/opt/aws-repo/cloudformation-templates/building-blocks/create-base-vpc_priv.yml"
        template_parameters:
          VPCcidr: "10.20.0.0/16"
          SNcidrs: "10.20.0.0/24, 10.20.1.0/24, 10.20.2.0/24, 10.20.3.0/24"
          KeyPair: "{{ ec2_keypair_name }}"
          NATimage: "{{ec2_nat_image}}"
          MgmtIP: "{{mgmt_ip}}"
      register: cf_vpc_ret
      async: 300
      poll: 30

    - name: Create the staging ASG
      cloudformation:
        stack_name: "{{app_name}}-stg"
        region: "{{aws_region}}"
        template: "/opt/aws-repo/cloudformation-templates/building-blocks/create-base-asg.yml"
        template_parameters:
          CustomAMI: "{{ ec2_base_ami }}"
          InstType: "t2.nano"
          EnvType: "stg"
          KeyPair: "{{ec2_keypair_name}}"
          ManagementIp: "{{ mgmt_ip }}"
          VPCid: "{{ cf_vpc_ret.stack_outputs.VPCid }}"
          PubSubnetIDs: "{{cf_vpc_ret.stack_outputs.SN1PubId}},{{cf_vpc_ret.stack_outputs.SN2PubId}}"
          PrivSubnetIDs: "{{cf_vpc_ret.stack_outputs.SN1PrivId}},{{cf_vpc_ret.stack_outputs.SN2PrivId}}"
      register: cf_stg_asg_ret
      async: 600
      poll: 0

    - name: Create the production ASG
      cloudformation:
        stack_name: "{{app_name}}-prod"
        region: "{{aws_region}}"
        template: "/opt/aws-repo/cloudformation-templates/building-blocks/create-base-asg.yml"
        template_parameters:
          CustomAMI: "{{ ec2_base_ami }}"
          InstType: "t2.nano"
          EnvType: "prod"
          KeyPair: "{{ec2_keypair_name}}"
          ManagementIp: "{{mgmt_ip}}"
          VPCid: "{{ cf_vpc_ret.stack_outputs.VPCid }}"
          PubSubnetIDs: "{{cf_vpc_ret.stack_outputs.SN1PubId}},{{cf_vpc_ret.stack_outputs.SN2PubId}}"
          PrivSubnetIDs: "{{cf_vpc_ret.stack_outputs.SN1PrivId}},{{cf_vpc_ret.stack_outputs.SN2PrivId}}"
      register: cf_prod_asg_ret
      async: 600
      poll: 0

    - name: Wait for STG to become available
      async_status:
        jid: "{{ cf_stg_asg_ret.ansible_job_id }}"
      register: stg_job_result
      until: stg_job_result.finished
      retries: 30
      delay: 20

    - name: Wait for PROD to become availabile
      async_status:
        jid: "{{ cf_prod_asg_ret.ansible_job_id }}"
      register: prod_job_result
      until: prod_job_result.finished
      retries: 30
      delay: 20

    - name: Create the pipeline
      cloudformation:
        stack_name: "{{app_name}}-pipe"
        region: "{{aws_region}}"
        template: "/opt/aws-repo/cloudformation-templates/building-blocks/create-base-pipeline.yml"
        template_parameters:
          AppName: "{{app_name}}"
          ASG: "{{ stg_job_result.stack_outputs.ASGname }}"
          TargetGroupName: "{{ stg_job_result.stack_outputs.TGname }}"
          ASGprod: "{{ prod_job_result.stack_outputs.ASGname }}"
          TargetGroupNamePROD: "{{ prod_job_result.stack_outputs.TGname }}"
      register: cf_pipe_ret
      async: 600
      poll: 30
