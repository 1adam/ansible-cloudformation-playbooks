---
- hosts: localhost
  become: yes
  tasks:
    - name: grab repo to local
      git:
        repo: 'https://github.com/1adam/aws.git'
        dest: '/opt/aws-repo'
        version: 'master'

- hosts: localhost
  become: yes
  become_user: root
  vars:
    ec2_keypair_name: ""
    ec2_base_ami: ""
    aws_region: "us-east-1"
  tasks:
    - name: preflight var check
      fail:
        msg: "Missing an important parameter."
      when: "ec2_keypair_name == ''"

    - block:
      - name: "Create a LAMP+CodeDeploy AMI from the latest Ubuntu-64 LTS"
        cloudformation:
          stack_name: "mkNewAMI"
          state: "present"
          region: "{{aws_region}}"
          template: '/opt/aws-repo/cloudformation-templates/ec2-codedeploy/Create-Ubuntu16-LAMP-AMI.yml'
          template_parameters:
            KeyPair: "{{ec2_keypair_name}}"
        register: cf_ret
        async: 600
        poll: 30

      - name: wait for the new AMI to become 'available'
        ec2_ami_facts:
          image_ids:
            - "{{ cf_ret.stack_outputs.FinalAMI }}"
        register: descNewAMI
        until: "descNewAMI.images[0].state.find('available') != -1"
        retries: 20
        delay: 30

      - name: remove the old/tmp stack used to create AMI
        cloudformation:
          stack_name: "mkNewAMI"
          state: "absent"
        async: 300
        poll: 0

      - name: set base AMI fact
        set_fact:
          ec2_base_ami: "{{ cf_ret.stack_outputs.FinalAMI }}"
      when: "ec2_base_ami == ''"

    - name: Create the VPC and subnets
      cloudformation:
        stack_name: "brandnewapp-vpc"
        region: "{{aws_region}}"
        template: "/opt/aws-repo/cloudformation-templates/pipeline/create-base-vpc.yml"
        template_parameters:
          VPCcidr: "10.20.0.0/16"
          SNcidrs: "10.20.0.0/24, 10.20.1.0/24"
      register: cf_vpc_ret
      async: 300
      poll: 30

    - name: Create the staging ASG
      cloudformation:
        stack_name: "brandnewapp-stg"
        region: "{{aws_region}}"
        template: "/opt/aws-repo/cloudformation-templates/pipeline/create-base-asg.yml"
        template_parameters:
          CustomAMI: "{{ ec2_base_ami }}"
          InstType: "t2.nano"
          EnvType: "stg"
          KeyPair: "nuKP"
          ManagementIp: "127.0.0.1"
          VPCid: "{{ cf_vpc_ret.stack_outputs.VPCid }}"
          SubnetIDs: "{{cf_vpc_ret.stack_outputs.SN1id}},{{cf_vpc_ret.stack_outputs.SN2id}}"
      register: cf_stg_asg_ret
      async: 600
      poll: 30

    - name: Create the production ASG
      cloudformation:
        stack_name: "brandnewapp-prod"
        region: "{{aws_region}}"
        template: "/opt/aws-repo/cloudformation-templates/pipeline/create-base-asg.yml"
        template_parameters:
          CustomAMI: "{{ ec2_base_ami }}"
          InstType: "t2.nano"
          EnvType: "prod"
          KeyPair: "nuKP"
          ManagementIp: "127.0.0.1"
          VPCid: "{{ cf_vpc_ret.stack_outputs.VPCid }}"
          SubnetIDs: "{{cf_vpc_ret.stack_outputs.SN1id}},{{cf_vpc_ret.stack_outputs.SN2id}}"
      register: cf_prod_asg_ret
      async: 600
      poll: 30

    - name: Create the pipeline
      cloudformation:
        stack_name: "brandnewapp-pipe"
        region: "{{aws_region}}"
        template: "/opt/aws-repo/cloudformation-templates/pipeline/create-base-pipeline.yml"
        template_parameters:
          AppName: "brandnewapp-app"
          ASG: "{{ cf_stg_asg_ret.stack_outputs.ASGname }}"
          TargetGroupName: "{{ cf_stg_asg_ret.stack_outputs.TGname }}"
          ASGprod: "{{ cf_prod_asg_ret.stack_outputs.ASGname }}"
          TargetGroupNamePROD: "{{ cf_prod_asg_ret.stack_outputs.TGname }}"
      register: cf_pipe_ret
      async: 600
      poll: 30
